
int Nx=64;
//mesh Th = square(Nx,Nx);
mesh Th = square(Nx, Nx, [-0.5 + x, -0.5 + y]);
fespace Vh(Th,P1);
fespace Uh(Th,P0);

//int Nt=200;
//real T=2.0e-2, dt=T/Nt;
int Nt=100;
real dt=1.0e-6;
//real T=1.0e-2, dt=T/Nt;
//real Du=1.0, Dv=1.0, K1=1.0, K2=0.01, K=0.001;
real Du=1.0, Dv=1.0, K1=1.0, K2=1.0, K=1.0;
//macro phi(v) 5*v^2 //
macro phi(v) v //

real a=75.0;
//real x1=0.3,y1=0.3,x2=0.7,y2=0.3,x3=0.5,y3=0.7;
//func u0 = 1*exp(-a*(x-x1)^2-a*(y-y1)^2) + 1*exp(-a*(x-x2)^2-a*(y-y2)^2) ;
//func v0 = 1*exp(-a*(x-x3)^2-a*(y-y3)^2);

//real x1=0.5,y1=1.0/2-sqrt(2)/6.0,x2=1.0/3.0,y2=2.0/3.0,x3=2.0/3.0,y3=2.0/3.0,x4=0.5,y4=0.5;
//func u0 = 400*exp(-a*(x-x1)^2-a*(y-y1)^2) + 400*exp(-a*(x-x2)^2-a*(y-y2)^2) + 400*exp(-a*(x-x3)^2-a*(y-y3)^2);
//func v0 = 1*exp(-10*(x-x4)^2-10*(y-y4)^2);
//func fu = pi^2*exp(-4*pi^2*j*dt)*(cos(pi*x)^2+cos(pi*y)^2-4*cos(pi*x)^2*cos(pi*y)^2);

//func u0 = 1000 * exp(-100 * (x*x + y*y));
//func v0 = 500 * exp(-50 * (x*x + y*y));

//func u0 =cos(pi*x)*cos(pi*y);
//func v0 =cos(pi*x)*cos(pi*y);
Vh uh,vh,ph,qh,uh1,vh1,phih;
Vh fu,u,v;
Vh g;
g = ph*uh1;
Uh dphihx,dphihy;


varf massM(ph,qh) = int2d(Th,qft=qf1pTlump)(ph*qh);
varf massMM(ph,qh) = int2d(Th)(ph*qh);
varf sourceU(ph,qh) = int2d(Th,qft=qf1pTlump)(fu*qh);
varf massM1(ph,qh) = int2d(Th,qft=qf1pTlump)(ph*qh);
varf massM2(ph,qh) = int2d(Th,qft=qf1pTlump)(g*qh);
varf stiffM(ph,qh) = int2d(Th)(dx(ph)*dx(qh)+dy(ph)*dy(qh));

matrix M = massM(Vh,Vh);
matrix MM = massMM(Vh,Vh);
real[int] U=sourceU(0,Vh);
matrix M1 = massM1(Vh,Vh);
matrix M2 = massM2(Vh,Vh);
matrix A = stiffM(Vh,Vh);
matrix B(Vh.ndof,Vh.ndof);

real[int] mass(Nt);

// geometric information
int i,j,j1,j2,k1,k2;
real[int] MV(2);
real[int,int] geom(Th.nt,9);

for(int t=0; t<Th.nt; t++){
    for(int k=0; k<3; k++){
        k1 = (k+1)%3;
        k2 = (k+2)%3;
        MV[0] = (Th[t][k1].x + Th[t][k2].x)/2.0 - Th[t][k].x;
        MV[1] = (Th[t][k1].y + Th[t][k2].y)/2.0 - Th[t][k].y;
        geom(t,k) = MV.l2/3.0;
        geom(t,2*k+3) = -MV[1]/MV.l2;
        geom(t,2*k+4) =  MV[0]/MV.l2;
    }
}




matrix Coeff(Vh.ndof,Vh.ndof);
matrix Coeff1(Vh.ndof,Vh.ndof);
real[int] rhs(Vh.ndof),rhs1(Vh.ndof),rhs2(Vh.ndof);


uh1 = u0;
vh1 = v0;
real gammaij1,gammaij2,nuij1x,nuij1y,nuij2x,nuij2y,temp1,temp2;

for(int j=1; j<=Nt; j++){

    
    //mass[n] = int2d(Th,qft=qf1pTlump)(uh1);
    plot(uh1,dim=3,fill=true,value=true,cmm="t = "+(j*dt));
    // plot(vh1,fill=true,value=true);
    //func fu = pi^2*exp(4*pi^2*j*dt)*(cos(pi*x)^2+cos(pi*y)^2-4*cos(pi*x)^2*cos(pi*y)^2);
    func fu = -pi*pi*exp(-4*pi*pi*j*dt)*(cos(2*pi*x)*cos(pi*y)^2+cos(pi*x)^2*cos(2*pi*y));
    func fv = 4*pi^2*exp(-4*pi^2*j*dt)*cos(2*pi*x)*cos(2*pi*y);
    phih = phi(vh1);
    dphihx = dx(phih);
    dphihy = dy(phih);

    // make coefficient matrix and RHS
    for(int t=0; t<Th.nt; t++){
        for(int k=0; k<3; k++){
            k1 = (k+1)%3;
            k2 = (k+2)%3;
            i = Th[t][k];
            j1 = Th[t][k1];
            j2 = Th[t][k2];
            gammaij1 = geom(t,k2);
            gammaij2 = geom(t,k1);
            nuij1x =  geom(t,2*k2+3);
            nuij1y =  geom(t,2*k2+4);
            nuij2x = -geom(t,2*k1+3);
            nuij2y = -geom(t,2*k1+4);

            temp1 = nuij1x*dphihx[][t] + nuij1y*dphihy[][t];
            temp2 = nuij2x*dphihx[][t] + nuij2y*dphihy[][t];
            if(temp1>0){
                B(i,i) += gammaij1 * temp1;
            }else{
                B(i,j1) += gammaij1 * temp1;
            }
            if(temp2>0){
                B(i,i) += gammaij2 * temp2;
            }else{
                B(i,j2) += gammaij2 * temp2;
            }
        }
    }
    real a=1;
    // Update u & v
    Coeff = (1-a)*M+a*MM + dt*Du*A + dt*B;
    set(Coeff, solver=sparsesolver);
    //Coeff1 = M + dt*M - dt*M2;
    //rhs = Coeff1*uh1[];
    M=(1-a)*M+a*MM;
    rhs = M*uh1[];
    rhs +=dt*U;
    uh[] = Coeff^-1*rhs;
    //rhs2:交差拡散項の追加
    Coeff = (1.0 + dt*K1/K)*M + dt/K*Dv*A;
    set(Coeff, solver=sparsesolver);
    rhs1 = vh1[] + dt*K2/K*uh[];
    //rhs2 = A*uh[];
    rhs = M*rhs1;
    //rhs = M*rhs1;
    //rhs -= dt*rhs2;
    vh[] = Coeff^-1*rhs;


    uh1 = uh;
    vh1 = vh;

    real mass = int2d(Th)(uh1);
    real umax = uh1[].max;
    real umin = uh1[].min;

    u =exp(2 * pi^2 * j*dt) * cos(pi * x) * cos(pi * y);
    v =exp(2 * pi^2 * j*dt) * cos(pi * x) * cos(pi * y);
    
    real L2Erroru = sqrt(int2d(Th)((u - uh1)^2));
    real L2Errorv = sqrt(int2d(Th)((v - vh1)^2));

    // coutで20桁の精度を設定
    cout.precision(20);
    cout << "mass = " << mass << ", max = " << umax << ", min = " << umin << ", L2Erroru = " << L2Erroru << endl;

}
