//load "Element_P3"
real d1 = 1.0, d2 = 1.0, alpha = 1.0, beta = 1.0;
real chi = 1.0, mu = 0;
real tau = sqrt(2)/256, eps = 0.9;
real kh = sqrt(2)/100;

// マクロの定義
macro f(u,v) (u) //
macro fu(u,v) ((dx(u)*dx(u)+dy(u)*dy(u))/((1+u)*(1+u))-2*pi*pi*u*u/(1+u)) //
macro fv(u,v) (2*pi*pi*v) //
//macro fs(u,v) ((-1)*(dx(u)*dx(v)+dy(u)*dy(v))) //


// パラメータ設定
real dt = 1.0e-6;
int imax = 100;
int NumnodeA, NumnodeB;

real sabunMax, vsabunMax, usabunMax;

// メッシュの定義
mesh Th = square(64, 64, [-0.5 + x, -0.5 + y]);
fespace Vh(Th, P1);
Vh du, dv, u, v, eta1, eta2, uold, vold, uk, vk, duk, dvk, u0,p;
Vh fs = (-1) * (dx(vk) * dx(eta1) + dy(vk) * dy(eta1));
// ノード数の取得
NumnodeA = Th.nv;
NumnodeB = Th.nv;

real[int] vsabun(NumnodeA);  
real[int] usabun(NumnodeB); 
//, qft=qf1pTlump
real t = 0;
int i, j;
problem KS1(duk, eta1, solver = UMFPACK, init = 0)
    = int2d(Th)(uk * eta1 
                + dt * d1 * (dx(uk) * dx(eta1) + dy(uk) * dy(eta1)))
    + int2d(Th)(duk * eta1
                + dt * d1 * (dx(duk) * dx(eta1) + dy(duk) * dy(eta1)))
    - int2d(Th)(dt * chi * f(uk, vk) * (dx(vk) * dx(eta1) + dy(vk) * dy(eta1)))
    - int2d(Th)(dt * chi * f(du, vk) * (dx(vk) * dx(eta1) + dy(vk) * dy(eta1))
                + uold * eta1);
    //SUPG method
    /*
    + int2d(Th)(uk * fs *p
                + dt * d1 * (dx(uk) * dx(fs) + dy(uk) * dy(fs))*p)
    + int2d(Th)(duk * fs*p
                + dt * d1 * (dx(duk) * dx(fs) + dy(duk) * dy(fs))*p)
    - int2d(Th)(dt * chi * f(uk, vk) * (dx(vk) * dx(fs) + dy(vk) * dy(fs))*p)
    - int2d(Th)(dt * chi * f(du, vk) * (dx(vk) * dx(fs) + dy(vk) * dy(fs)*p)
                + uold * fs*p);
                */

problem KS2(dvk, eta2, solver = UMFPACK, init = 0)
    = int2d(Th)(vk * eta2 
                + dt * d2 * (dx(vk) * dx(eta2) + dy(vk) * dy(eta2))
                + dt * beta * (vk * eta2))
    + int2d(Th)(dvk * eta2
                + dt * d2 * (dx(dvk) * dx(eta2) + dy(dvk) * dy(eta2))
                + dt * beta * (dvk * eta2))
    - int2d(Th)(dt * alpha * uk * eta2)
    - int2d(Th)(dt * alpha * duk * eta2
                + vold * eta2);

u = 1000 * exp(-100 * (x*x + y*y));
v = 500 * exp(-50 * (x*x + y*y));
uk = u;
vk = v;

int l = 0;
int lmax = 50;
/*
// 結果を保存するCSVファイルをオープン
ofstream massvalue("massvalue.csv");
massvalue.precision(20); // 精度を20桁に設定
massvalue << "Step, Mass, Min\n"; 
*/
// 時間ステップのループ内で誤差を計算
for (i = 1; i <= imax; i++) {
    real gradNorm = v[].linfty;
    real dt = min(tau, eps * kh / (4 * gradNorm));
    //t = dt * i;
    real p = 1/(128*sqrt((dx(vk)*dx(vk)+dy(vk)*dy(vk))));
    sabunMax = 1;
    uold = u;
    vold = v;
    l = 0;

    // 収束条件のループ
    while (sabunMax > 1e-8 && l < lmax) {
        KS1; // vk2を解く
        KS2; // uk2を解く

        // 解を更新し、差分を計算
        for (j = 0; j < NumnodeA; j++) {
            usabun = duk[].linfty / uk[].linfty;
            vsabun = dvk[].linfty / vk[].linfty;
        }

        vsabunMax = vsabun.linfty;
        usabunMax = usabun.linfty;
        sabunMax = max(vsabunMax, usabunMax);
        cout << sabunMax << endl;

        // 次の反復のために古い値を更新
        uk = uk + duk;
        vk = vk + dvk;
        l = l + 1;
    }

    // 収束後の最終値を更新
    t=t+dt;
    u = uk;
    v = vk;

/*    real massn = int2d(Th)(u);
    real mass0 = int2d(Th)(u0);
    real mass = (massn - mass0) / mass0;
    real umin = u[].min;
    
    // coutで20桁の精度を設定
    cout.precision(20);*/
    cout << "i = " << i << ", t = " << t << endl;
 /*   cout << "mass = " << mass << ", min = " << umin << endl;

    // CSVファイルに書き込み（20桁の精度で）
    massvalue << i << ", " << mass << ", " << umin << "\n"; 
*/
    // プロット
    plot(u, dim = 3, cmm = "u : " + i + " : t=" + t, value = true, fill = 1, wait = 0);
}
