//real Du = 1.0, Dv = 1.0, k = 0.1, k1 = 0.1, k2 = 0.01;
real Du = 1.0, Dv = 1.0, k = 1.0, k1 = 1.0, k2 = 1.0;
real tau = sqrt(2) / 256, eps = 0.9;
real kh = sqrt(2)/100;
real vn=0;
//時間刻み
real dt = 1.0e-6;
int imax = 100;

//メッシュの定義
// 行列のサイズを定義
int N = 64;
int n = (N+1)*(N+1);//n=4225
int m = (N+1)*(N+1);//m=4225
mesh Th = square(N, N, [-0.5 + x, -0.5 + y]);
//空間の定義
fespace Vh(Th, P1);
Vh u, chi, uold, b1;
Vh v, eta, vold, b2;

// 初期値
u = 1000 * exp(-100 * (x*x + y*y));
v = 500 * exp(-50 * (x*x + y*y));

// 時間ステップループ
int i = 0;
real t = 0;
for (i = 1; i <= imax; i++) {
    // vの∞ノルム
    vn = v[].linfty; 
    //時間刻みの計算
    //dt = min(tau, eps * kh / (4 * vn));
    t = t + dt;
    //解の更新
    uold = u;
    vold = v;
    // n x m のゼロ行列を作成, B:移流項に関する係数行列, Bp:[beta^(+)_(ij)], Bm:[beta^(-)_(ij)]
    matrix B(n, m);
    matrix Bp(n, m);
    matrix Bm(n, m);
    ////////////////////////////////////Bpの作製/////////////////////////////////////////////////////////
    //左下の角, i=0
    for(int i = 0; i < 1; i++) {
        Bp(i, i+1) += max(0.0, (3*vold[][i+1]-2*vold[][i]-vold[][i+N+2])/6);//右　(1)⇀
        Bp(i, i+N+1) += max(0.0, (3*vold[][i+N+1]-2*vold[][i]-vold[][i+N+2])/6);//上　(2)↾
        Bp(i, i+N+2) += max(0.0, (vold[][i+N+2]-vold[][i])/3);//右上　(3)↗
    }

    //右下の角, i=64
    for(int i = N; i < N+1; i++) {
        Bp(i, i-1) += max(0.0, (2*vold[][i-1]+vold[][i+N+1]-3*vold[][i])/6);//左　(4)↼
        Bp(i, i+N+1) += max(0.0, (2*vold[][i+N+1]+vold[][i-1]-3*vold[][i])/6);//上　(5)↿
    }

    //左上の角, i=4160
    for(int i = N*(N+1); i < N*(N+1)+1; i++) {
        Bp(i, i-(N+1)) += max(0.0, (2*vold[][i-(N+1)]+vold[][i+1]-3*vold[][i])/6);//下　(6)⇂
        Bp(i, i+1) += max(0.0, (2*vold[][i+1]+vold[][i-(N+1)]-3*vold[][i])/6);//右　(7)⇁
    }

    //右上の角, i=4224
    for(int i = (N+1)*(N+1)-1; i < (N+1)*(N+1); i++) {
        Bp(i, i-(N+2)) += max(0.0, (vold[][i-(N+2)]-vold[][i])/3);//左下　(8)↙
        Bp(i, i-(N+1)) += max(0.0, (3*vold[][i-(N+1)]-2*vold[][i]-vold[][i-(N+2)])/6);//下　(9)⇃
        Bp(i, i-1) += max(0.0, (3*vold[][i-1]-2*vold[][i]-vold[][i-(N+2)])/6);//左　(10)↽
    }

    //領域の下辺, i=1~63
    for(int i = 1; i < N; i++) {
        Bp(i, i-1) += max(0.0, (2*vold[][i-1]+vold[][i+N+1]-3*vold[][i])/6);//左　(4)↼
        Bp(i, i+1) += max(0.0, (3*vold[][i+1]-2*vold[][i]-vold[][i+N+2])/6);//右　(1)⇀
        Bp(i, i+N+1) += max(0.0, (2*vold[][i+N+1]+vold[][i-1]-3*vold[][i])/6)+max(0.0, (3*vold[][i+N+1]-2*vold[][i]-vold[][i+N+2])/6);//上　(5)↿ + (2)↾
        Bp(i, i+N+2) += max(0.0, (vold[][i+N+2]-vold[][i])/3);//右上　(3)↗
    }

    //領域の上辺, i=4161~4223
    for(int i = N*(N+1)+1; i < m-1; i++) {
        Bp(i, i-(N+2)) += max(0.0, (vold[][i-(N+2)]-vold[][i])/3);//左下　(8)↙
        Bp(i, i-(N+1)) += max(0.0, (3*vold[][i-(N+1)]-2*vold[][i]-vold[][i-(N+2)])/6)+max(0.0, (2*vold[][i-(N+1)]+vold[][i+1]-3*vold[][i])/6);//下　(9)⇃ + (6)⇂
        Bp(i, i-1) += max(0.0, (3*vold[][i-1]-2*vold[][i]-vold[][i-(N+2)])/6);//左　(10)↽
        Bp(i, i+1) += max(0.0, (2*vold[][i+1]+vold[][i-(N+1)]-3*vold[][i])/6);//右　(7)⇁
    }

    //領域の左辺, i=65,130,...,4095
    for(int i = N+1; i < m-(N+1); i += N+1) {
        Bp(i, i-(N+1)) += max(0.0, (2*vold[][i-(N+1)]+vold[][i+1]-3*vold[][i])/6);//下　(6)⇂
        Bp(i, i+1) += max(0.0, (3*vold[][i+1]-2*vold[][i]-vold[][i+N+2])/6)+max(0.0, (2*vold[][i+1]+vold[][i-(N+1)]-3*vold[][i])/6);//右　(1)⇀ + (7)⇁
        Bp(i, i+N+1) += max(0.0, (3*vold[][i+N+1]-2*vold[][i]-vold[][i+N+2])/6);//上　(2)↾
        Bp(i, i+N+2) += max(0.0, (vold[][i+N+2]-vold[][i])/3);//右上　(3)↗
    }

    //領域の右辺, i=129,194,...,4159
    for(int i = N+(N+1); i < m-(N+1); i += N+1) {
        Bp(i, i-(N+2)) += max(0.0, (vold[][i-(N+2)]-vold[][i])/3);//左下　(8)↙
        Bp(i, i-(N+1)) += max(0.0, (3*vold[][i-(N+1)]-2*vold[][i]-vold[][i-(N+2)])/6);//下　(9)⇃
        Bp(i, i-1) += max(0.0, (2*vold[][i-1]+vold[][i+N+1]-3*vold[][i])/6)+max(0.0, (3*vold[][i-1]-2*vold[][i]-vold[][i-(N+2)])/6);//左　(4)↼ + (10)↽
        Bp(i, i+N+1) += max(0.0, (2*vold[][i+N+1]+vold[][i-1]-3*vold[][i])/6);//上　(5)↿
    }

    //領域の内部, i=66~128,...,4096~4158
    for(int i = N+2; i < n-N-2; i++) {
        if(i%(N+1)!=0 || (i-N)%(N+1)!=0){
        Bp(i, i-(N+2)) += max(0.0, (vold[][i-(N+2)]-vold[][i])/3);//左下　(8)↙
        Bp(i, i-(N+1)) += max(0.0, (3*vold[][i-(N+1)]-2*vold[][i]-vold[][i-(N+2)])/6)+max(0.0, (2*vold[][i-(N+1)]+vold[][i+1]-3*vold[][i])/6);//下　(9)⇃ + (6)⇂
        Bp(i, i-1) += max(0.0, (2*vold[][i-1]+vold[][i+N+1]-3*vold[][i])/6)+max(0.0, (3*vold[][i-1]-2*vold[][i]-vold[][i-(N+2)])/6);//左　(4)↼ + (10)↽
        Bp(i, i+1) += max(0.0, (3*vold[][i+1]-2*vold[][i]-vold[][i+N+2])/6)+max(0.0, (2*vold[][i+1]+vold[][i-(N+1)]-3*vold[][i])/6);//右　(1)⇀ + (7)⇁
        Bp(i, i+N+1) += max(0.0, (2*vold[][i+N+1]+vold[][i-1]-3*vold[][i])/6)+max(0.0, (3*vold[][i+N+1]-2*vold[][i]-vold[][i+N+2])/6);//上　(5)↿ + (2)↾
        Bp(i, i+N+2) += max(0.0, (vold[][i+N+2]-vold[][i])/3);//右上　(3)↗
        }
    }
    /////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////Bmの作製/////////////////////////////////////////////////////////
    //左下の角, i=0
    for(int i = 0; i < 1; i++) {
        Bm(i, i+1) += max(0.0, -(3*vold[][i+1]-2*vold[][i]-vold[][i+N+2])/6);//右　(1)⇀
        Bm(i, i+N+1) += max(0.0, -(3*vold[][i+N+1]-2*vold[][i]-vold[][i+N+2])/6);//上　(2)↾
        Bm(i, i+N+2) += max(0.0, -(vold[][i+N+2]-vold[][i])/3);//右上　(3)↗
    }

    //右下の角, i=64
    for(int i = N; i < N+1; i++) {
        Bm(i, i-1) += max(0.0, -(2*vold[][i-1]+vold[][i+N+1]-3*vold[][i])/6);//左　(4)↼
        Bm(i, i+N+1) += max(0.0, -(2*vold[][i+N+1]+vold[][i-1]-3*vold[][i])/6);//上　(5)↿
    }

    //左上の角, i=4160
    for(int i = N*(N+1); i < N*(N+1)+1; i++) {
        Bm(i, i-(N+1)) += max(0.0, -(2*vold[][i-(N+1)]+vold[][i+1]-3*vold[][i])/6);//下　(6)⇂
        Bm(i, i+1) += max(0.0, -(2*vold[][i+1]+vold[][i-(N+1)]-3*vold[][i])/6);//右　(7)⇁
    }

    //右上の角, i=4224
    for(int i = (N+1)*(N+1)-1; i < (N+1)*(N+1); i++) {
        Bm(i, i-(N+2)) += max(0.0, -(vold[][i-(N+2)]-vold[][i])/3);//左下　(8)↙
        Bm(i, i-(N+1)) += max(0.0, -(3*vold[][i-(N+1)]-2*vold[][i]-vold[][i-(N+2)])/6);//下　(9)⇃
        Bm(i, i-1) += max(0.0, -(3*vold[][i-1]-2*vold[][i]-vold[][i-(N+2)])/6);//左　(10)↽
    }

    //領域の下辺, i=1~63
    for(int i = 1; i < N; i++) {
        Bm(i, i-1) += max(0.0, -(2*vold[][i-1]+vold[][i+N+1]-3*vold[][i])/6);//左　(4)↼
        Bm(i, i+1) += max(0.0, -(3*vold[][i+1]-2*vold[][i]-vold[][i+N+2])/6);//右　(1)⇀
        Bm(i, i+N+1) += max(0.0, -(2*vold[][i+N+1]+vold[][i-1]-3*vold[][i])/6)+max(0.0, -(3*vold[][i+N+1]-2*vold[][i]-vold[][i+N+2])/6);//上　(5)↿ + (2)↾
        Bm(i, i+N+2) += max(0.0, -(vold[][i+N+2]-vold[][i])/3);//右上　(3)↗
    }

    //領域の上辺, i=4161~4223
    for(int i = N*(N+1)+1; i < m-1; i++) {
        Bm(i, i-(N+2)) += max(0.0, -(vold[][i-(N+2)]-vold[][i])/3);//左下　(8)↙
        Bm(i, i-(N+1)) += max(0.0, -(3*vold[][i-(N+1)]-2*vold[][i]-vold[][i-(N+2)])/6)+max(0.0, -(2*vold[][i-(N+1)]+vold[][i+1]-3*vold[][i])/6);//下　(9)⇃ + (6)⇂
        Bm(i, i-1) += max(0.0, -(3*vold[][i-1]-2*vold[][i]-vold[][i-(N+2)])/6);//左　(10)↽
        Bm(i, i+1) += max(0.0, -(2*vold[][i+1]+vold[][i-(N+1)]-3*vold[][i])/6);//右　(7)⇁
    }

    //領域の左辺, i=65,130,...,4095
    for(int i = N+1; i < m-(N+1); i += N+1) {
        Bm(i, i-(N+1)) += max(0.0, -(2*vold[][i-(N+1)]+vold[][i+1]-3*vold[][i])/6);//下　(6)⇂
        Bm(i, i+1) += max(0.0, -(3*vold[][i+1]-2*vold[][i]-vold[][i+N+2])/6)+max(0.0, -(2*vold[][i+1]+vold[][i-(N+1)]-3*vold[][i])/6);//右　(1)⇀ + (7)⇁
        Bm(i, i+N+1) += max(0.0, -(3*vold[][i+N+1]-2*vold[][i]-vold[][i+N+2])/6);//上　(2)↾
        Bm(i, i+N+2) += max(0.0, -(vold[][i+N+2]-vold[][i])/3);//右上　(3)↗
    }

    //領域の右辺, i=129,194,...,4159
    for(int i = N+(N+1); i < m-(N+1); i += N+1) {
        Bm(i, i-(N+2)) += max(0.0, -(vold[][i-(N+2)]-vold[][i])/3);//左下　(8)↙
        Bm(i, i-(N+1)) += max(0.0, -(3*vold[][i-(N+1)]-2*vold[][i]-vold[][i-(N+2)])/6);//下　(9)⇃
        Bm(i, i-1) += max(0.0, -(2*vold[][i-1]+vold[][i+N+1]-3*vold[][i])/6)+max(0.0, -(3*vold[][i-1]-2*vold[][i]-vold[][i-(N+2)])/6);//左　(4)↼ + (10)↽
        Bm(i, i+N+1) += max(0.0, -(2*vold[][i+N+1]+vold[][i-1]-3*vold[][i])/6);//上　(5)↿
    }

    //領域の内部, i=66~128,...,4096~4158
    for(int i = N+2; i < n-N-2; i++) {
        if(i%(N+1)!=0 || (i-N)%(N+1)!=0){
        Bm(i, i-(N+2)) += max(0.0, -(vold[][i-(N+2)]-vold[][i])/3);//左下　(8)↙
        Bm(i, i-(N+1)) += max(0.0, -(3*vold[][i-(N+1)]-2*vold[][i]-vold[][i-(N+2)])/6)+max(0.0, -(2*vold[][i-(N+1)]+vold[][i+1]-3*vold[][i])/6);//下　(9)⇃ + (6)⇂
        Bm(i, i-1) += max(0.0, -(2*vold[][i-1]+vold[][i+N+1]-3*vold[][i])/6)+max(0.0, -(3*vold[][i-1]-2*vold[][i]-vold[][i-(N+2)])/6);//左　(4)↼ + (10)↽
        Bm(i, i+1) += max(0.0, -(3*vold[][i+1]-2*vold[][i]-vold[][i+N+2])/6)+max(0.0, -(2*vold[][i+1]+vold[][i-(N+1)]-3*vold[][i])/6);//右　(1)⇀ + (7)⇁
        Bm(i, i+N+1) += max(0.0, -(2*vold[][i+N+1]+vold[][i-1]-3*vold[][i])/6)+max(0.0, -(3*vold[][i+N+1]-2*vold[][i]-vold[][i+N+2])/6);//上　(5)↿ + (2)↾
        Bm(i, i+N+2) += max(0.0, -(vold[][i+N+2]-vold[][i])/3);//右上　(3)↗
        }
    }
    /////////////////////////////////////////////////////////////////////////////////////////////////////
    ////////////////////////////////////Bの作製/////////////////////////////////////////////////////////

    // B の対角成分に Bp の i 行の総和を代入
    //左下の角, i=0
    for(int i = 0; i < 1; i++) {
        B(i, i) = dt * (Bp(i, i+1)+Bp(i, i+N+1)+Bp(i, i+N+2));//右　(1)⇀ + 上　(2)↾ + 右上　(3)↗
    }

    //右下の角, i=64
    for(int i = N; i < N+1; i++) {
        B(i, i) = dt * (Bp(i, i-1)+Bp(i, i+N+1));//左　(4)↼ + 上　(5)↿
    }

    //左上の角, i=4160
    for(int i = N*(N+1); i < N*(N+1)+1; i++) {
        B(i, i) = dt * (Bp(i, i-(N+1))+Bp(i, i+1));//下　(6)⇂ + 右　(7)⇁
    }

    //右上の角, i=4224
    for(int i = (N+1)*(N+1)-1; i < (N+1)*(N+1); i++) {
        B(i, i) = dt * (Bp(i, i-(N+2)) + Bp(i, i-(N+1)) + Bp(i, i-1));//左下　(8)↙ + 下　(9)⇃ + 左　(10)↽
    }

    //領域の下辺, i=1~63
    for(int i = 1; i < N; i++) {
        B(i, i) = dt * (Bp(i, i-1) + Bp(i, i+1) + Bp(i, i+N+1) + Bp(i, i+N+2));//左　(4)↼ + 右　(1)⇀ + 上　(5)↿ + (2)↾ + 右上　(3)↗
    }

    //領域の上辺, i=4161~4223
    for(int i = N*(N+1)+1; i < m-1; i++) {
        B(i, i) = dt * (Bp(i, i-(N+2)) + Bp(i, i-(N+1)) + Bp(i, i-1) + Bp(i, i+1));//左下　(8)↙ + 下　(9)⇃ + (6)⇂ + 左　(10)↽ + 右　(7)⇁
    }

    //領域の左辺, i=65,130,...,4095
    for(int i = N+1; i < m-(N+1); i += N+1) {
        B(i, i) = dt * (Bp(i, i-(N+1)) + Bp(i, i+1) + Bp(i, i+N+1) + Bp(i, i+N+2));//下　(6)⇂ + 右　(1)⇀ + (7)⇁ + 上　(2)↾ + 右上　(3)↗
    }

    //領域の右辺, i=129,194,...,4159
    for(int i = N+(N+1); i < m-(N+1); i += N+1) {
        B(i, i) = dt * (Bp(i, i-(N+2)) + Bp(i, i-(N+1)) + Bp(i, i-1) + Bp(i, i+N+1));//左下　(8)↙ + 下　(9)⇃ + 左　(4)↼ + (10)↽ + 上　(5)↿
    }

    //領域の内部, i=66~128,...,4096~4158
    for(int i = N+2; i < n-N-2; i++) {
        if(i%(N+1)!=0 || (i-N)%(N+1)!=0){
        B(i, i) = dt * (Bp(i, i-(N+2)) + Bp(i, i-(N+1)) + Bp(i, i-1) + Bp(i, i+1) + Bp(i, i+N+1) + Bp(i, i+N+2));
        //左下　(8)↙ + 下　(9)⇃ + (6)⇂ + 左　(4)↼ + (10)↽ + 右　(1)⇀ + (7)⇁ + 上　(5)↿ + (2)↾ + 右上　(3)↗
        }
    }
    /*
    // B の対角成分に Bp の i 行の総和を代入
    for(int i = 0; i < n; i++) {
        real rowSum = 0.0;
        for(int j = 0; j < m; j++) {
            rowSum += dt*Bp(i, j);
        }
        B(i, i) = rowSum;
    }*/

    // B の非対角成分に -Bm(i,j) を代入
    //左下の角, i=0
    for(int i = 0; i < 1; i++) {
        B(i, i+1) = -dt * Bm(i, i+1);//右　(1)⇀ 
        B(i, i+N+1) = -dt * Bm(i, i+N+1);//上　(2)↾ 
        B(i, i+N+2) = -dt * Bm(i, i+N+2);//右上　(3)↗
    }

    //右下の角, i=64
    for(int i = N; i < N+1; i++) {
        B(i, i-1) = -dt * Bm(i, i-1);//左　(4)↼ 
        B(i, i+N+1) = -dt * Bm(i, i+N+1);//上　(5)↿
    }

    //左上の角, i=4160
    for(int i = N*(N+1); i < N*(N+1)+1; i++) {
        B(i, i-(N+1)) = -dt * Bm(i, i-(N+1));//下　(6)⇂
        B(i, i+1) = -dt * Bm(i, i+1);//右　(7)⇁
    }

    //右上の角, i=4224
    for(int i = (N+1)*(N+1)-1; i < (N+1)*(N+1); i++) {
        B(i, i-(N+2)) = -dt * Bm(i, i-(N+2));//左下　(8)↙
        B(i, i-(N+1)) = -dt * Bm(i, i-(N+1));//下　(9)⇃
        B(i, i-1) = -dt * Bm(i, i-1);//左　(10)↽
    }

    //領域の下辺, i=1~63
    for(int i = 1; i < N; i++) {
        B(i, i-1) = -dt * Bm(i, i-1);//左　(4)↼
        B(i, i+1) = -dt * Bm(i, i+1);//右　(1)⇀
        B(i, i+N+1) = -dt * Bm(i, i+N+1);//上　(5)↿ + (2)↾
        B(i, i+N+2) = -dt * Bm(i, i+N+2);//右上　(3)↗
    }

    //領域の上辺, i=4161~4223
    for(int i = N*(N+1)+1; i < m-1; i++) {
        B(i, i-(N+2)) = -dt * Bm(i, i-(N+2));//左下　(8)↙ 
        B(i, i-(N+1)) = -dt * Bm(i, i-(N+1));//下　(9)⇃
        B(i, i-1) = -dt * Bm(i, i-1);//左　(10)↽ 
        B(i, i+1) = -dt * Bm(i, i+1);//右　(7)⇁
    }

    //領域の左辺, i=65,130,...,4095
    for(int i = N+1; i < m-(N+1); i += N+1) {
        B(i, i-(N+1)) = -dt * Bm(i, i-(N+1));//下　(6)⇂
        B(i, i+1) = -dt * Bm(i, i+1);//右　(1)⇀ + (7)⇁
        B(i, i+N+1) = -dt * Bm(i, i+N+1);//上　(2)↾
        B(i, i+N+2) = -dt * Bm(i, i+N+2);//右上　(3)↗
    }

    //領域の右辺, i=129,194,...,4159
    for(int i = N+(N+1); i < m-(N+1); i += N+1) {
        B(i, i-(N+2)) = -dt * Bm(i, i-(N+2));//左下　(8)↙ 
        B(i, i-(N+1)) = -dt *  Bm(i, i-(N+1));//下　(9)⇃
        B(i, i-1) = -dt * Bm(i, i-1);//左　(4)↼ + (10)↽
        B(i, i+N+1) = -dt * Bm(i, i+N+1);//上　(5)↿
    }

    //領域の内部, i=66~128,...,4096~4158
    for(int i = N+2; i < n-N-2; i++) {
        if(i%(N+1)!=0 || (i-N)%(N+1)!=0){
        B(i, i-(N+2)) = -dt * Bm(i, i-(N+2));//左下　(8)↙ 
        B(i, i-(N+1)) = -dt * Bm(i, i-(N+1));//下　(9)⇃ + (6)⇂
        B(i, i-1) = -dt * Bm(i, i-1);//左　(4)↼ + (10)↽ 
        B(i, i+1) = -dt * Bm(i, i+1);//右　(1)⇀ + (7)⇁ 
        B(i, i+N+1) = -dt * Bm(i, i+N+1);//上　(5)↿ + (2)↾
        B(i, i+N+2) = -dt * Bm(i, i+N+2);//右上　(3)↗
        }
    }
    // B の非対角成分に -Bm(i,j) を代入
    /*
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < m; j++) {
            if(i != j) {
                B(i, j) = dt*(-Bm(i, j));
            }
        }
    }*/
    /////////////////////////////////////////////////////////////////////////////////////////////////////
    //uに関する係数行列A1
    varf a1(u,chi)
        = int2d(Th, qft=qf1pTlump)(u * chi)
        //拡散項
        + int2d(Th)(dt * Du * (dx(u) * dx(chi) + dy(u) * dy(chi)));  
    //行列A1
    matrix A1=a1(Vh,Vh); 
    /*matrix M(n,m);
    for(int i = 0; i < n; i++) {
        for(int j = 0; j < m; j++) {
            M(i, j) = A1(i, j);
        }
    }*/
    matrix D(n,m);
    D=A1+B;
    //右辺ベクトルrhs1
    varf rhs1(unused,chi)
        =int2d(Th, qft=qf1pTlump)(uold * chi);
    //右辺ベクトル
    b1[] = rhs1(0,Vh);
    /*
    real[int] d(n);
    for(int i = 0; i < n; i++) {
        d[i] = b1[][i];
    }*/
    //係数行列とsolverの定義
    set(D, solver = GMRES);
    real[int] uh(n);
    //uの計算
    uh = D^-1 * b1[];
    u[]=uh;

    //vに関する係数行列A2,右辺ベクトルrhs2
    varf a2(v, eta)
        = int2d(Th, qft=qf1pTlump)(k * (v * eta))
        //拡散項
        + int2d(Th)(dt * Dv * (dx(v) * dx(eta) + dy(v) * dy(eta)))
        //vに関する反応項
        + int2d(Th, qft=qf1pTlump)(dt * k1 * v * eta);
    matrix A2=a2(Vh,Vh); 
    varf rhs2(unused,eta)
        =int2d(Th, qft=qf1pTlump)(k * (vold * eta))
        //uに関する反応項
        +int2d(Th, qft=qf1pTlump)(dt * k2 * u * eta);
    //右辺ベクトルの作製
    b2[] = rhs2(0,Vh);
    set(A2, solver = CG);
    //vの計算
    v[]=A2^-1*b2[];

    // 結果を表示
    cout << "i = " << i << ", t = " << t << ", dt = " << dt << endl;
    plot(u, dim=3, cmm="u : " + i + " : t=" + t, value=true, fill=1, wait=0);
    real mass = int2d(Th)(u);
    //real mass0 = int2d(Th)(u0);
    //real mass = (massn - mass0) / mass0;
    real umin = u[].min;
    
    // coutで20桁の精度を設定
    cout.precision(20);
    cout << "mass = " << mass << ", min = " << umin << endl;
}
