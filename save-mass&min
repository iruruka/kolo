real d1 = 1.0, d2 = 1.0, alpha = 1.0, beta = 1.0;
real chi = 1.0, mu = 0;

// マクロの定義
macro f(u,v) (u) //
macro fu(u,v) ((dx(u)*dx(u)+dy(u)*dy(u))/((1+u)*(1+u))-2*pi*pi*u*u/(1+u)) //
macro fv(u,v) (2*pi*pi*v) //

// パラメータ設定
real dt = 1.0e-6;
int imax = 5;
int NumnodeA, NumnodeB;

real sabunMax, vsabunMax, usabunMax;

// メッシュの定義
mesh Th = square(4, 4, [-0.5 + x, -0.5 + y]);
fespace Vh(Th, P2);
Vh du, dv, u, v, eta1, eta2, uold, vold, uk2, vk2, uk1, vk1, uk, vk, duk, dvk;

// ノード数の取得
NumnodeA = Th.nv;
NumnodeB = Th.nv;

real[int] vsabun(NumnodeA);  
real[int] usabun(NumnodeB); 

real t = 0;
int i, j;

// 問題の定義
problem KS1(uk2, eta1, solver = UMFPACK, init = 0)
    = int2d(Th)(uk2 * eta1
                + dt * d1 * (dx(uk2) * dx(eta1) + dy(uk2) * dy(eta1)))
    - int2d(Th)(dt * chi * f(uk1, vk1) * (dx(vk2) * dx(eta1) + dy(vk2) * dy(eta1))
                + uold * eta1);

problem KS2(vk2, eta2, solver = UMFPACK, init = 0)
    = int2d(Th)(vk2 * eta2 
                + dt * d2 * (dx(vk2) * dx(eta2) + dy(vk2) * dy(eta2) )
                + dt * beta * (vk2 * eta2  ))
    + int2d(Th)(dt * mu * (dx(uk1) * dx(eta2) + dy(uk1) * dy(eta2))
                - dt * alpha * uk1 * eta2
                - vold * eta2);

// 初期条件の設定
u = 1000 * exp(-100 * (x*x + y*y));
v = 500 * exp(-50 * (x*x + y*y));
uk1 = u;
vk1 = v;

int l = 0;
int lmax = 10;

// 結果を保存するCSVファイルをオープン
ofstream massvalue("massvalue.csv");
massvalue << "Step, Mass, Min\n"; // ヘッダーを追加

// 時間ステップのループ内で誤差を計算
for (i = 1; i <= imax; i++) {
    t = dt * i;

    sabunMax = 1;
    uold = u;
    vold = v;
    l = 0;

    // 収束条件のループ
    while (sabunMax > 1e-8 && l < lmax) {
        KS2; // vk2を解く
        KS1; // uk2を解く

        // 解を更新し、差分を計算
        for (j = 0; j < NumnodeA; j++) {
            duk = uk1 - uk2;
            dvk = vk1 - vk2;
            vsabun = duk[].linfty / uk1[].linfty;
            usabun = duk[].linfty / vk1[].linfty;
        }

        vsabunMax = vsabun.linfty;
        usabunMax = usabun.linfty;
        sabunMax = max(vsabunMax, usabunMax);
        cout << sabunMax << endl;

        // 次の反復のために古い値を更新
        vk1 = vk2;
        uk1 = uk2;
        l = l + 1;
    }

    // 収束後の最終値を更新
    v = vk1;
    u = uk1;

    real mass = int2d(Th)(u);
    real umin = u[].min;
    cout << "i = " << i << ", t = " << t << endl;
    cout << "mass = " << mass << ", min = " << umin << endl;

    // CSVファイルに書き込み
    massvalue << i << ", " << mass << ", " << umin << "\n"; 
    // プロット
    plot(u, dim = 3, cmm = "u : " + i + " : t=" + t, value = true, fill = 1, wait = 0);
}

