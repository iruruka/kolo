int Nx=128;
mesh Th = square(Nx,Nx);
//mesh Th = square(Nx, Nx, [-0.5 + x, -0.5 + y]);
fespace Vh(Th,P1);
fespace Uh(Th,P0);

int Ntmax=501;
real T=1.0e-1, tau=sqrt(2)/256, dt, epsilon=0.9, kappa, time=0.0, eps=1.0e-10;
real d1=1.0,d2=1.0,alpha=1.0,beta=1.0,chi=1.0,mu=1;
macro phi(v) v//


real a=95.0;
//real x1=0.3,y1=0.3,x2=0.7,y2=0.3,x3=0.5,y3=0.7;
//func u0 = 1*exp(-a*(x-x1)^2-a*(y-y1)^2) + 1*exp(-a*(x-x2)^2-a*(y-y2)^2) ;
//func v0 = 1*exp(-a*(x-x3)^2-a*(y-y3)^2);
//real x1=0.5,y1=1.0/3.0,x2=1.0/2.0+sqrt(3)/12.0,y2=1.0/2.0+1.0/12.0,x3=1.0/2.0-sqrt(3)/12.0,y3=1.0/2.0+1.0/12.0,x4=0.5,y4=0.5;
//real x1=0.5,y1=2.0/9.0,x2=1.0/2.0+5*sqrt(3)/36.0,y2=1.0/2.0+5.0/36.0,x3=1.0/2.0-5*sqrt(3)/36.0,y3=1.0/2.0+5.0/36.0,x4=0.5,y4=0.5;
//real x1=0.5,y1=8.0/27.0,x2=1.0/2.0+11*sqrt(3)/108.0,y2=1.0/2.0+11.0/108.0,x3=1.0/2.0-11*sqrt(3)/108.0,y3=1.0/2.0+11.0/108.0,x4=0.5,y4=0.5;
//func u0 = 500*exp(-a*(x-x1)^2-a*(y-y1)^2) + 500*exp(-a*(x-x2)^2-a*(y-y2)^2) + 500*exp(-a*(x-x3)^2-a*(y-y3)^2);
//func v0 = 1*exp(-1*(x-x4)^2-1*(y-y4)^2);
//func u0 = 1000 * exp(-100 * (x*x + y*y));
//func v0 = 50 * exp(- 5 * ((x+0.4)^2 + (y+0.4)^2));
//func v0 = 500 * exp(-50 * (x*x + y*y));
real b = 75.0;
real r = 0.2;
real x1 = 0.5 + r*cos(0);
real y1 = 0.5 + r*sin(0);
real x2 = 0.5 + r*cos(2*pi/3);
real y2 = 0.5 + r*sin(2*pi/3);
real x3 = 0.5 + r*cos(4*pi/3);
real y3 = 0.5 + r*sin(4*pi/3);
func u0 = 300*exp(-b*(x - x1)^2 - b*(y - y1)^2)
        + 300*exp(-b*(x - x2)^2 - b*(y - y2)^2)
        + 300*exp(-b*(x - x3)^2 - b*(y - y3)^2);
func v0 = 100 * exp(-50* ((x-0.5)^2 + (y-0.5)^2));
Vh uh,vh,ph,qh,uh1,vh1,phih;
Uh dphihx,dphihy;


varf massM(ph,qh) = int2d(Th,qft=qf1pTlump)(ph*qh);
varf stiffM(ph,qh) = int2d(Th)(dx(ph)*dx(qh)+dy(ph)*dy(qh));

matrix M = massM(Vh,Vh);
matrix A = stiffM(Vh,Vh);
//matrix B(Vh.ndof,Vh.ndof);

real[int] mass(Ntmax), times(Ntmax);

// geometric information
int i,j,j1,j2,k1,k2,itr=1;
real[int] MV(2);
real[int,int] geom(Th.nt,9);
real Area,Len;
kappa = 1.0;

for(int t=0; t<Th.nt; t++){
    Area = Th[t].area;
    for(int k=0; k<3; k++){
        k1 = (k+1)%3;
        k2 = (k+2)%3;
        MV[0] = (Th[t][k1].x + Th[t][k2].x)/2.0 - Th[t][k].x;
        MV[1] = (Th[t][k1].y + Th[t][k2].y)/2.0 - Th[t][k].y;
        geom(t,k) = MV.l2/3.0;
        geom(t,2*k+3) = -MV[1]/MV.l2;
        geom(t,2*k+4) =  MV[0]/MV.l2;

        Len = sqrt( (Th[t][k1].x - Th[t][k2].x)^2 + (Th[t][k1].y - Th[t][k2].y)^2 );
        kappa = min(kappa, Area/Len*2);
    }
}




matrix Coeff(Vh.ndof,Vh.ndof);
real[int] rhs(Vh.ndof),rhs1(Vh.ndof),rhs2(Vh.ndof);


uh1 = u0;
vh1 = v0;
real gammaij1,gammaij2,nuij1x,nuij1y,nuij2x,nuij2y,temp1,temp2,dphiNorm;

// 結果を保存するCSVファイルをオープン
//ofstream massvalue("massvalue-ad.csv");
//massvalue << "Step, Mass, Min\n"; // ヘッダーを追加

while(time<T && itr<Ntmax){

    
    mass[itr] = int2d(Th,qft=qf1pTlump)(uh1);
    times[itr] = time;

    plot(vh1,dim=3,fill=true,value=true,cmm="t = "+time+", iteration: "+itr);
    // plot(vh1,fill=true,value=true);

    phih = phi(vh1);
    dphihx = dx(phih);
    dphihy = dy(phih);
    dphiNorm = 0.0;
    matrix B(Vh.ndof,Vh.ndof);
    // make coefficient matrix and RHS
    for(int t=0; t<Th.nt; t++){
        dphiNorm = max( dphiNorm, sqrt(dphihx[][t]^2 + dphihy[][t]^2) );
        for(int k=0; k<3; k++){
            k1 = (k+1)%3;
            k2 = (k+2)%3;
            i = Th[t][k];
            j1 = Th[t][k1];
            j2 = Th[t][k2];
            gammaij1 = geom(t,k2);
            gammaij2 = geom(t,k1);
            nuij1x =  geom(t,2*k2+3);
            nuij1y =  geom(t,2*k2+4);
            nuij2x = -geom(t,2*k1+3);
            nuij2y = -geom(t,2*k1+4);

            temp1 = nuij1x*dphihx[][t] + nuij1y*dphihy[][t];
            temp2 = nuij2x*dphihx[][t] + nuij2y*dphihy[][t];
            if(temp1>0){
                B(i,i) += gammaij1 * temp1;
            }else{
                B(i,j1) += gammaij1 * temp1;
            }
            if(temp2>0){
                B(i,i) += gammaij2 * temp2;
            }else{
                B(i,j2) += gammaij2 * temp2;
            }
        }
    }
    // Comupute time increment
    dt = dphiNorm<eps ? tau : min(tau, epsilon*kappa/(4*dphiNorm) );

    // Update u & v
    Coeff = M + dt*d1*A + dt*chi*B;
    set(Coeff, solver=sparsesolver);
    rhs = M*uh1[];
    uh[] = Coeff^-1*rhs;
    //rhs2:交差拡散項の追加
    Coeff = (1.0 + dt*beta)*M + dt*d2*A;
    set(Coeff, solver=sparsesolver);
    rhs1 = vh1[] + dt*alpha*uh[];
    rhs2 = A*uh[];
    rhs = M*rhs1;
    rhs -= dt*mu*rhs2;
    vh[] = Coeff^-1*rhs;


    uh1 = uh;
    vh1 = vh;
/*
    ofstream fout("data/KSv"+itr+".csv");

    // CSV形式で座標とuの値を出力
    for (int i = 0; i < Th.nv; i++) {
        real xval = Th(i).x;
        real yval = Th(i).y;
        real vval = vh1(xval, yval);
        fout << xval << "," << yval << "," << vval << endl;
    }
*/
    real mass = int2d(Th)(uh1);
    real vmin = vh1[].min;
  
    // coutで20桁の精度を設定
    cout.precision(20);
    cout << "mass = " << mass << ", min = " << vmin << endl;

    // CSVファイルに書き込み
   // massvalue.precision(20);
    //massvalue << time << ", " << mass << ", " << vmin << "\n"; 

    time += dt;
    itr += 1;

}
/*
ofstream tt("mass_adaptive.csv");
tt.precision(16);
for(int l=0;l<Ntmax;l++){
    tt << times[l] << "," << mass[l] << endl;
}*/
