int Nx=16;
mesh Th = square(Nx,Nx);
//mesh Th = square(Nx, Nx, [-0.5 + x, -0.5 + y]);
fespace Vh(Th,P1);
fespace Uh(Th,P0);

int Ntmax=100;
//real T=1.0e-1, tau=sqrt(2)/256, dt, epsilon=0.9, kappa, time=0.0, eps=1.0e-10;
real T=1.0e-1, tau=1.0e-6, dt, epsilon=0.9, kappa, time=0.0, eps=1.0e-10;
real d1=1.0,d2=1.0,alpha=1.0,beta=1.0,chi=1.0,mu=1;
macro phi(v) v //

real b = 75.0;
real r = 0.2;
real x1 = 0.5 + r*cos(0.0);
real y1 = 0.5 + r*sin(0.0);
real x2 = 0.5 + r*cos(2*pi/3);
real y2 = 0.5 + r*sin(2*pi/3);
real x3 = 0.5 + r*cos(4*pi/3);
real y3 = 0.5 + r*sin(4*pi/3);
func u0 = 300*exp(-b*(x - x1)^2 - b*(y - y1)^2)
        + 300*exp(-b*(x - x2)^2 - b*(y - y2)^2)
        + 300*exp(-b*(x - x3)^2 - b*(y - y3)^2);
func v0 = 100 * exp(-50* ((x-0.5)^2 + (y-0.5)^2));
Vh uh,vh,ph,qh,uh1,vh1,phih;
Uh dphihx,dphihy;


varf massM(ph,qh) = int2d(Th,qft=qf1pTlump)(ph*qh);
varf stiffM(ph,qh) = int2d(Th)(dx(ph)*dx(qh)+dy(ph)*dy(qh));
//varf convM(ph,qh) = int2d(Th)(ph*(dx(vh1)*dx(qh)+dy(vh1)*dy(qh)));

matrix M = massM(Vh,Vh);
matrix A = stiffM(Vh,Vh);
//matrix K = convM(Vh,Vh);

real[int] mass(Ntmax), times(Ntmax);

// geometric information
int i,j,j1,j2,k1,k2,itr=1;
real[int] MV(2);
real[int,int] geom(Th.nt,9);
real Area,Len;
kappa = 1.0;

for(int t=0; t<Th.nt; t++){
    Area = Th[t].area;
    for(int k=0; k<3; k++){
        k1 = (k+1)%3;
        k2 = (k+2)%3;
        MV[0] = (Th[t][k1].x + Th[t][k2].x)/2.0 - Th[t][k].x;
        MV[1] = (Th[t][k1].y + Th[t][k2].y)/2.0 - Th[t][k].y;
        geom(t,k) = MV.l2/3.0;
        geom(t,2*k+3) = -MV[1]/MV.l2;
        geom(t,2*k+4) =  MV[0]/MV.l2;

        Len = sqrt( (Th[t][k1].x - Th[t][k2].x)^2 + (Th[t][k1].y - Th[t][k2].y)^2 );
        kappa = min(kappa, Area/Len*2);
    }
}




matrix Coeff(Vh.ndof,Vh.ndof);
real[int] rhs(Vh.ndof),rhs1(Vh.ndof),rhs2(Vh.ndof);


uh1 = u0;
vh1 = v0;
real gammaij1,gammaij2,nuij1x,nuij1y,nuij2x,nuij2y,temp1,temp2,dphiNorm;

// 結果を保存するCSVファイルをオープン
//ofstream massvalue("massvalue-ad.csv");
//massvalue << "Step, Mass, Min\n"; // ヘッダーを追加

while(time<T && itr<Ntmax){

    
    mass[itr] = int2d(Th,qft=qf1pTlump)(uh1);
    times[itr] = time;

    plot(uh1,dim=3,fill=true,value=true,cmm="t = "+time+", iteration: "+itr);
    // plot(vh1,fill=true,value=true);

    phih = phi(vh1);
    dphihx = dx(phih);
    dphihy = dy(phih);
    dphiNorm = 0.0;
    matrix B(Vh.ndof,Vh.ndof);
    // make coefficient matrix and RHS
    for(int t=0; t<Th.nt; t++){
        dphiNorm = max( dphiNorm, sqrt(dphihx[][t]^2 + dphihy[][t]^2) );
        for(int k=0; k<3; k++){
            k1 = (k+1)%3;
            k2 = (k+2)%3;
            i = Th[t][k];
            j1 = Th[t][k1];
            j2 = Th[t][k2];
            gammaij1 = geom(t,k2);
            gammaij2 = geom(t,k1);
            nuij1x =  geom(t,2*k2+3);
            nuij1y =  geom(t,2*k2+4);
            nuij2x = -geom(t,2*k1+3);
            nuij2y = -geom(t,2*k1+4);

            temp1 = nuij1x*dphihx[][t] + nuij1y*dphihy[][t];
            temp2 = nuij2x*dphihx[][t] + nuij2y*dphihy[][t];
            if(temp1>0){
                B(i,i) += gammaij1 * temp1;
            }else{
                B(i,j1) += gammaij1 * temp1;
            }
            if(temp2>0){
                B(i,i) += gammaij2 * temp2;
            }else{
                B(i,j2) += gammaij2 * temp2;
            }
        }
    }
    // Comupute time increment
    dt = dphiNorm<eps ? tau : min(tau, epsilon*kappa/(4*dphiNorm) );

    // Update u & v
    Coeff = M + dt*d1*A + dt*chi*B;
    set(Coeff, solver=sparsesolver);
    rhs = M*uh1[];
    uh[] = Coeff^-1*rhs;
    //FCT
    int i,k1,k2,r1,r2;
    matrix C(Vh.ndof, Vh.ndof);
    matrix F(Vh.ndof, Vh.ndof);
    matrix a(Vh.ndof, Vh.ndof);
    matrix fa(Vh.ndof, Vh.ndof);
    varf convM(ph,qh) = int2d(Th)(-ph*(dx(vh1)*dx(qh)+dy(vh1)*dy(qh)));
    matrix K = convM(Vh,Vh);


    real[int] Pp(Vh.ndof),Pn(Vh.ndof),Qp(Vh.ndof),Qn(Vh.ndof),Rp(Vh.ndof),Rn(Vh.ndof),Fa(Vh.ndof);
    C=B-K;

/*    ofstream csvFile("matrix_C.csv");

    // 行列aの各要素を出力。各行はカンマ区切りにしています。
    for (int i = 0; i < Vh.ndof; i++) {
        for (int j = 0; j < Vh.ndof; j++) {
            csvFile << C(i, j);
            if (j < Vh.ndof - 1) csvFile << ",";
        }
        csvFile << "\n";
    }*/

    for(int i = 0; i < Vh.ndof; i++) {
        for(int j = 0; j < Vh.ndof; j++) {
            F(i,j)= C(i, j)*(uh[][j]-uh[][i]);
        }
    }
    for(int i = 0; i < Vh.ndof; i++) {
        for(int j = 0; j < Vh.ndof; j++) {
            if(F(i, j)*(uh[][j]-uh[][i])> 0) {
                F(i,j)=0;
            }
        }
    }
    for(int i = 0; i < Vh.ndof; i++) {
        for(int j = 0; j < Vh.ndof; j++) {
            real a = F(i,j);
            // C(i,j)*(uh_i - uh_j) は符号を反転したい等、状況に応じて調整
            real b = C(i, j) * (uh[][i] - uh[][j]); 

            // --- minmodの実装例 ---
            if (a * b <= 0.0) {
                // 異符号なら0を返す
                F(i,j) = 0.0;
            } else {
                // 同符号なら絶対値が小さい方
                F(i,j) = (abs(a) < abs(b)) ? a : b;
            }
        }
    }
    for(int i = 0; i < Vh.ndof; i++) {
        for(int j = 0; j < Vh.ndof; j++) {
            if(i != j) {  
                Pp[i]+= max(0.0,F(i,j));
                Pn[i]+= min(0.0,F(i,j));
            }
        }
    }
for(int i=0; i<Vh.ndof; i++) {
    Qp[i] = -1e30;
    Qn[i] =  1e30;
}

for(int i=0; i<Vh.ndof; i++) {
    real ui = uh[][i];
    for(int j=0; j<Vh.ndof; j++) {
        if(j == i) continue;
        real diff = uh[][j] - ui;
        Qp[i] = max(Qp[i], diff);
        Qn[i] = min(Qn[i], diff);
    }
}

// 最後に 0 との比較
for(int i=0; i<Vh.ndof; i++){
    Qp[i] = max(0., Qp[i]);
    Qn[i] = min(0., Qn[i]);
}
    for(int i = 0; i < Vh.ndof; i++) {
        if(Pp[i]!=0){
            Rp[i]=min(1.0,M(i,i)*Qp[i]/(dt*Pp[i]));
        }else{
            Rp[i]=1.0;
        }
        if(Pn[i]!=0){
            Rn[i]=min(1.0,M(i,i)*Qn[i]/(dt*Pn[i]));
        }else{
            Rn[i]=1.0;
        }
    }
    for(int i = 0; i < Vh.ndof; i++) {
        for(int j = 0; j < Vh.ndof; j++) {
        if (F(i,j)>0) {
            a(i,j)=min(Rp[i],Rn[j]);
        } else {
            a(i,j)=min(Rp[j],Rn[i]);
        }
        }
    }
    for(int i = 0; i < Vh.ndof; i++) {
        for(int j = 0; j < Vh.ndof; j++) {
            fa(i,j)=a(i,j)*F(i,j);
        }
    }

    for (int i = 0; i < Vh.ndof; i++) {
        for (int j = 0; j < Vh.ndof; j++) {
            if(i != j) { 
                Fa[i] += fa(i,j);
            }
        }
    }

    Coeff = M + dt*d1*A + dt*chi*B;
    set(Coeff, solver=sparsesolver);
    rhs = M*uh1[];
    //rhs += dt*Fa;
    uh[] = Coeff^-1*rhs;

    Coeff = (1.0 + dt*beta)*M + dt*d2*A;
    set(Coeff, solver=sparsesolver);
    rhs1 = vh1[] + dt*alpha*uh[];
    rhs = M*rhs1;
    vh[] = Coeff^-1*rhs;


    uh1 = uh;
    vh1 = vh;

    real mass = int2d(Th)(uh1);
    real umin = uh1[].min;
  
    // coutで20桁の精度を設定
    cout.precision(20);
    cout << "mass = " << mass << ", min = " << umin << endl;

    time += dt;
    itr += 1;

}
