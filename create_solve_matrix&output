// 行列のサイズを定義
int N = 64;
int n = 4225;
int m = 4225;
mesh Th = square(N, N);
fespace Vh(Th, P1);
Vh v,u;
v = x*x+y*y;
// n x m のゼロ行列を作成
matrix A(n, m);

// 行と列に値を代入するループ
for(int i = 0; i < n; i++) {
    for(int j = 0; j < m; j++) {
        if(i == j) {
            // 対角成分に周期的な値を代入（例：正弦波）
            A(i, j) += 1;//v[](i);
        } else {
            // 非対角成分に別の周期的な値を代入（例：コサイン波）
            A(i, j) += 0;
        }
    }
}

// 固定サイズの配列を宣言
real[int] b(n);

// 要素に値を代入
for(int i = 0; i < n; i++) {
    b[i] += 1.0; // 各要素に1を加算
}

set(A, solver = GMRES);
real[int] uh(n);

uh = A^-1 * b;

u[]=uh;
/*
for(int i = 0; i < n; i++) {
    u[](i) = uh[i];
}
*/
plot(u, value=true, fill=1);

/*
// ベクトルを表示（必要に応じて）
for(int i = 0; i < n; i++) {
    cout << b[i] << " ";
}
cout << endl;
// CSVファイルを開く

ofstream csvFile("matrix_output.csv");

// 行列の要素をCSV形式で書き出す
for(int i = 0; i < n; i++) {
    for(int j = 0; j < m; j++) {
        csvFile << A(i, j);
        if(j < m-1) {
            csvFile << ","; // 列の区切り
        }
    }
    csvFile << "\n"; // 行の区切り
}

cout << "Matrix has been successfully written to matrix_output.csv" << endl;
*/
